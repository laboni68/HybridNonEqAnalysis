-------------------The Z3 formula for the old method (z3 smt format) -------------------------
(let ((a!1 (= Ret (/ (* (UF_bt_1 a b x) (AF_betacf a b x)) a)))
      (a!3 (/ (* (UF_bt_1 a b x) (AF_betacf b a (- 1.0 x))) b)))
(let ((a!2 (and (not (= a 0.0))
                (< x (/ (+ a 1.0) (+ a b 2.0)))
                (not (= (+ a b 2.0) 0.0))
                a!1))
      (a!4 (and (not (= b 0.0))
                (= (/ (+ a 1.0) (+ a b 2.0)) x)
                (not (= (+ a b 2.0) 0.0))
                (= Ret (- 1.0 a!3))))
      (a!5 (and (not (= b 0.0))
                (> x (/ (+ a 1.0) (+ a b 2.0)))
                (not (= (+ a b 2.0) 0.0))
                (= Ret (- 1.0 a!3)))))
  (or a!2 a!4 a!5)))
-----------------------------------------------------------------------------------------------

-------------------The Z3 formula for the new method ------------------------------------------
(let ((a!1 (= Ret (/ (* (UF_bt_1 a b x) (AF_betacf a b x)) a)))
      (a!3 (/ (* (UF_bt_1 a b x) (AF_betacf b a (- 1.0 x))) b)))
(let ((a!2 (and (not (= a 0.0)) (not (= (AF_checkCond a b x) 0)) a!1)))
  (or a!2 (and (not (= b 0.0)) (= (AF_checkCond a b x) 0) (= Ret (- 1.0 a!3))))))
-----------------------------------------------------------------------------------------------

-------------------The final Z3 formula for constraint solving -------------------------
(declare-fun a () Real)
(declare-fun x () Real)
(declare-fun b () Real)
(declare-fun Ret () Real)
(declare-fun UF_bt_1 (Real Real Real ) Real)
(declare-fun AF_betacf (Real Real Real ) Real)
(declare-fun AF_checkCond (Real Real Real ) Int)
(let ((a!1 (= Ret (/ (* (UF_bt_1 a b x) (AF_betacf a b x)) a)))
      (a!3 (/ (* (UF_bt_1 a b x) (AF_betacf b a (- 1.0 x))) b)))
(let ((a!2 (and (not (= a 0.0))
                (< x (/ (+ a 1.0) (+ a b 2.0)))
                (not (= (+ a b 2.0) 0.0))
                a!1))
      (a!4 (and (not (= b 0.0))
                (= (/ (+ a 1.0) (+ a b 2.0)) x)
                (not (= (+ a b 2.0) 0.0))
                (= Ret (- 1.0 a!3))))
      (a!5 (and (not (= b 0.0))
                (> x (/ (+ a 1.0) (+ a b 2.0)))
                (not (= (+ a b 2.0) 0.0))
                (= Ret (- 1.0 a!3))))
      (a!6 (and (not (= a 0.0)) (not (= (AF_checkCond a b x) 0)) a!1)))
(let ((a!7 (or a!6
               (and (not (= b 0.0))
                    (= (AF_checkCond a b x) 0)
                    (= Ret (- 1.0 a!3))))))
  (not (= (or a!2 a!4 a!5) a!7)))))
-----------------------------------------------------------------------------------------------
