

----------------------------------------------------Model (the counterexample in z3 smt2 format): ---------------------------------
(model 
  (define-fun Ret () Int
    0)
  (define-fun x () Int
    1)
  (define-fun log ((x!0 Real)) Real
    0.0)
)

-----------------------------------------------------------------------------------------------
-------------------The Z3 formula for the old method (z3 smt format) -------------------------
(let ((a!1 (and (>= (+ (+ x 1) 1) 0) (< (+ x 1) 0) (< x 0) (= Ret 2))))
  (or a!1 (and (>= (+ x 1) 0) (< x 0) (= Ret 1)) (and (>= x 0) (= Ret 0))))
-----------------------------------------------------------------------------------------------

-------------------The Z3 formula for the new method ------------------------------------------
(or (and (< x 0) (= Ret (- 0 x))) (and (>= x 0) (= Ret x)))
-----------------------------------------------------------------------------------------------

-------------------The final Z3 formula for constraint solving -------------------------
(declare-fun x () Int)
(declare-fun Ret () Int)
(let ((a!1 (and (>= (+ (+ x 1) 1) 0) (< (+ x 1) 0) (< x 0) (= Ret 2)))
      (a!3 (or (and (< x 0) (= Ret (- 0 x))) (and (>= x 0) (= Ret x)))))
(let ((a!2 (or a!1
               (and (>= (+ x 1) 0) (< x 0) (= Ret 1))
               (and (>= x 0) (= Ret 0)))))
  (not (= a!2 a!3))))
-----------------------------------------------------------------------------------------------
