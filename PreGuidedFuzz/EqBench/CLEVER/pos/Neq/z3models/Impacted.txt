

----------------------------------------------------Model (the counterexample in z3 smt2 format): ---------------------------------
(model 
  (define-fun Ret () Int
    2)
  (define-fun x () Int
    (- 2))
  (define-fun log ((x!0 Real)) Real
    0.0)
)

-----------------------------------------------------------------------------------------------
-------------------The Z3 formula for the old method (z3 smt format) -------------------------
(let ((a!1 (and (>= (+ (+ x 1) 1) 0) (< (+ x 1) 0) (< x 0) (= Ret 2))))
  (or a!1 (and (>= (+ x 1) 0) (< x 0) (= Ret 1)) (and (>= x 0) (= Ret 0))))
-----------------------------------------------------------------------------------------------

-------------------The Z3 formula for the new method ------------------------------------------
(let ((a!1 (and (>= (+ (+ x 1) 1) 0) (< (+ x 1) 0) (< x 0) (= Ret 3))))
  (or a!1 (and (>= (+ x 1) 0) (< x 0) (= Ret 2)) (and (>= x 0) (= Ret 1))))
-----------------------------------------------------------------------------------------------

-------------------The final Z3 formula for constraint solving -------------------------
(declare-fun x () Int)
(declare-fun Ret () Int)
(let ((a!1 (and (>= (+ (+ x 1) 1) 0) (< (+ x 1) 0) (< x 0)))
      (a!2 (and (and (>= (+ x 1) 0) (< x 0)) (= Ret 1)))
      (a!3 (and (and (>= (+ x 1) 0) (< x 0)) (= Ret 2))))
(let ((a!4 (= (or (and a!1 (= Ret 2)) a!2 (and (>= x 0) (= Ret 0)))
              (or (and a!1 (= Ret 3)) a!3 (and (>= x 0) (= Ret 1))))))
  (not a!4)))
-----------------------------------------------------------------------------------------------
