

----------------------------------------------------Model (the counterexample in z3 smt2 format): ---------------------------------
(model 
  (define-fun Ret () Int
    0)
  (define-fun x () Int
    0)
  (define-fun log ((x!0 Real)) Real
    0.0)
)

-----------------------------------------------------------------------------------------------
-------------------The Z3 formula for the old method (z3 smt format) -------------------------
(or (and (= x 0) (= Ret 0))
    (and (< x 0) (not (= x 0)) (= Ret (- 1)))
    (and (>= x 0) (not (= x 0)) (= Ret 1)))
-----------------------------------------------------------------------------------------------

-------------------The Z3 formula for the new method ------------------------------------------
(or (and (<= x 0) (= Ret (- 1))) (and (> x 0) (= Ret 1)))
-----------------------------------------------------------------------------------------------

-------------------The final Z3 formula for constraint solving -------------------------
(declare-fun x () Int)
(declare-fun Ret () Int)
(let ((a!1 (or (and (= x 0) (= Ret 0))
               (and (< x 0) (not (= x 0)) (= Ret (- 1)))
               (and (>= x 0) (not (= x 0)) (= Ret 1)))))
(let ((a!2 (= a!1 (or (and (<= x 0) (= Ret (- 1))) (and (> x 0) (= Ret 1))))))
  (not a!2)))
-----------------------------------------------------------------------------------------------
