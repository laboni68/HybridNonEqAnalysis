-------------------The Z3 formula for the old method (z3 smt format) -------------------------
(let ((a!1 (/ (^ vC (to_real (to_int 2.0))) (tan (* bank_ang degToRad))))
      (a!2 (/ (^ vA (to_real (to_int 2.0))) (tan (* bank_ang degToRad)))))
(let ((a!3 (* (/ (* (* psi1 degToRad) (/ a!2 g)) vA) 1.0 vC))
      (a!6 (* (* (/ a!2 g) 1.0) (- 1.0 (cos (* psi1 degToRad))))))
(let ((a!4 (cos (+ psiC (/ a!3 (/ a!1 g)))))
      (a!7 (sin (+ psiC (/ a!3 (/ a!1 g))))))
(let ((a!5 (+ xC0 (* (* (/ a!1 g) 1.0) (- (cos psiC) a!4))))
      (a!8 (- yC0 (* (* (/ a!1 g) 1.0) (- (sin psiC) a!7)))))
(let ((a!9 (- a!8 (* (* (/ a!2 g) 1.0) (sin (* psi1 degToRad))))))
(let ((a!10 (+ (^ (- a!5 a!6) (to_real (to_int 2.0)))
               (^ a!9 (to_real (to_int 2.0))))))
(let ((a!11 (and (< (^ (/ 1.0 2.0) a!10) 2.0)
                 (< (^ (/ 1.0 2.0) a!10) 999.0)
                 (= Ret (^ (/ 1.0 2.0) a!10))))
      (a!12 (and (= 2.0 (^ (/ 1.0 2.0) a!10))
                 (< (^ (/ 1.0 2.0) a!10) 999.0)
                 (= Ret 2.0)))
      (a!13 (and (> (^ (/ 1.0 2.0) a!10) 2.0)
                 (< (^ (/ 1.0 2.0) a!10) 999.0)
                 (= Ret 2.0))))
  (or a!11
      a!12
      a!13
      a!11
      a!12
      a!13
      (and (= 999.0 (^ (/ 1.0 2.0) a!10)) (= Ret 2.0))
      (and (> (^ (/ 1.0 2.0) a!10) 999.0) (= Ret 2.0))))))))))
-----------------------------------------------------------------------------------------------

-------------------The Z3 formula for the new method ------------------------------------------
(let ((a!1 (/ (^ vA (to_real (to_int 2.0))) (tan (* bank_ang degToRad))))
      (a!2 (/ (^ vC (to_real (to_int 2.0))) (tan (* bank_ang degToRad)))))
(let ((a!3 (* (/ (* (* psi1 degToRad) (/ a!1 g)) vA) 1.0 vC))
      (a!6 (* (* (/ a!1 g) 1.0) (- 1.0 (cos (* psi1 degToRad))))))
(let ((a!4 (cos (+ psiC (/ a!3 (/ a!2 g)))))
      (a!7 (sin (+ psiC (/ a!3 (/ a!2 g))))))
(let ((a!5 (+ xC0 (* (* (/ a!2 g) 1.0) (- (cos psiC) a!4))))
      (a!8 (- yC0 (* (* (/ a!2 g) 1.0) (- (sin psiC) a!7)))))
(let ((a!9 (- a!8 (* (* (/ a!1 g) 1.0) (sin (* psi1 degToRad))))))
(let ((a!10 (+ (^ (- a!5 a!6) (to_real (to_int 2.0)))
               (^ a!9 (to_real (to_int 2.0))))))
(let ((a!11 (and (< (/ a!1 g) (/ a!2 g))
                 (< (^ (/ 1.0 2.0) a!10) 999.0)
                 (= Ret 2.0)))
      (a!12 (and (= (/ a!2 g) (/ a!1 g))
                 (< (^ (/ 1.0 2.0) a!10) 999.0)
                 (= Ret 2.0)))
      (a!13 (and (< (^ (/ 1.0 2.0) a!10) 2.0)
                 (> (/ a!1 g) (/ a!2 g))
                 (< (^ (/ 1.0 2.0) a!10) 999.0)
                 (= Ret (^ (/ 1.0 2.0) a!10))))
      (a!14 (and (= 2.0 (^ (/ 1.0 2.0) a!10))
                 (> (/ a!1 g) (/ a!2 g))
                 (< (^ (/ 1.0 2.0) a!10) 999.0)
                 (= Ret 2.0)))
      (a!15 (and (> (^ (/ 1.0 2.0) a!10) 2.0)
                 (> (/ a!1 g) (/ a!2 g))
                 (< (^ (/ 1.0 2.0) a!10) 999.0)
                 (= Ret 2.0))))
  (or a!11
      a!12
      a!13
      a!14
      a!15
      a!11
      a!12
      a!13
      a!14
      a!15
      (and (= 999.0 (^ (/ 1.0 2.0) a!10)) (= Ret 2.0))
      (and (> (^ (/ 1.0 2.0) a!10) 999.0) (= Ret 2.0))))))))))
-----------------------------------------------------------------------------------------------

-------------------The final Z3 formula for constraint solving -------------------------
(declare-fun xC0 () Real)
(declare-fun vC () Real)
(declare-fun bank_ang () Real)
(declare-fun degToRad () Real)
(declare-fun g () Real)
(declare-fun psiC () Real)
(declare-fun psi1 () Real)
(declare-fun vA () Real)
(declare-fun yC0 () Real)
(declare-fun Ret () Real)
(let ((a!1 (/ (^ vC (to_real (to_int 2.0))) (tan (* bank_ang degToRad))))
      (a!2 (/ (^ vA (to_real (to_int 2.0))) (tan (* bank_ang degToRad)))))
(let ((a!3 (* (/ (* (* psi1 degToRad) (/ a!2 g)) vA) 1.0 vC))
      (a!6 (* (* (/ a!2 g) 1.0) (- 1.0 (cos (* psi1 degToRad))))))
(let ((a!4 (cos (+ psiC (/ a!3 (/ a!1 g)))))
      (a!7 (sin (+ psiC (/ a!3 (/ a!1 g))))))
(let ((a!5 (+ xC0 (* (* (/ a!1 g) 1.0) (- (cos psiC) a!4))))
      (a!8 (- yC0 (* (* (/ a!1 g) 1.0) (- (sin psiC) a!7)))))
(let ((a!9 (- a!8 (* (* (/ a!2 g) 1.0) (sin (* psi1 degToRad))))))
(let ((a!10 (+ (^ (- a!5 a!6) (to_real (to_int 2.0)))
               (^ a!9 (to_real (to_int 2.0))))))
(let ((a!11 (and (< (^ (/ 1.0 2.0) a!10) 2.0)
                 (< (^ (/ 1.0 2.0) a!10) 999.0)
                 (= Ret (^ (/ 1.0 2.0) a!10))))
      (a!12 (and (= 2.0 (^ (/ 1.0 2.0) a!10))
                 (< (^ (/ 1.0 2.0) a!10) 999.0)
                 (= Ret 2.0)))
      (a!13 (and (> (^ (/ 1.0 2.0) a!10) 2.0)
                 (< (^ (/ 1.0 2.0) a!10) 999.0)
                 (= Ret 2.0)))
      (a!15 (and (< (/ a!2 g) (/ a!1 g))
                 (< (^ (/ 1.0 2.0) a!10) 999.0)
                 (= Ret 2.0)))
      (a!16 (and (= (/ a!1 g) (/ a!2 g))
                 (< (^ (/ 1.0 2.0) a!10) 999.0)
                 (= Ret 2.0)))
      (a!17 (and (< (^ (/ 1.0 2.0) a!10) 2.0)
                 (> (/ a!2 g) (/ a!1 g))
                 (< (^ (/ 1.0 2.0) a!10) 999.0)
                 (= Ret (^ (/ 1.0 2.0) a!10))))
      (a!18 (and (= 2.0 (^ (/ 1.0 2.0) a!10))
                 (> (/ a!2 g) (/ a!1 g))
                 (< (^ (/ 1.0 2.0) a!10) 999.0)
                 (= Ret 2.0)))
      (a!19 (and (> (^ (/ 1.0 2.0) a!10) 2.0)
                 (> (/ a!2 g) (/ a!1 g))
                 (< (^ (/ 1.0 2.0) a!10) 999.0)
                 (= Ret 2.0))))
(let ((a!14 (or a!11
                a!12
                a!13
                a!11
                a!12
                a!13
                (and (= 999.0 (^ (/ 1.0 2.0) a!10)) (= Ret 2.0))
                (and (> (^ (/ 1.0 2.0) a!10) 999.0) (= Ret 2.0))))
      (a!20 (or a!15
                a!16
                a!17
                a!18
                a!19
                a!15
                a!16
                a!17
                a!18
                a!19
                (and (= 999.0 (^ (/ 1.0 2.0) a!10)) (= Ret 2.0))
                (and (> (^ (/ 1.0 2.0) a!10) 999.0) (= Ret 2.0)))))
  (not (= a!14 a!20))))))))))
-----------------------------------------------------------------------------------------------
