

----------------------------------------------------Model (the counterexample in z3 smt2 format): ---------------------------------
(model 
  (define-fun Ret () Real
    2.0)
  (define-fun n () Real
    (/ 3.0 2.0))
  (define-fun log ((x!0 Real)) Real
    0.0)
)

-----------------------------------------------------------------------------------------------
-------------------The Z3 formula for the old method (z3 smt format) -------------------------
(or (and (> 2.0 n) (< 1.0 n) (< 0.0 n) (= Ret 2.0))
    (and (> 2.0 n) (= n 1.0) (< 0.0 n) (= Ret 2.0))
    (and (> 1.0 n) (< 0.0 n) (= Ret 1.0))
    (and (> 1.0 n) (= n 0.0) (= Ret 1.0))
    (and (> 0.0 n) (= Ret 0.0)))
-----------------------------------------------------------------------------------------------

-------------------The Z3 formula for the new method ------------------------------------------
(or (and (< n 0.0) (= Ret 0.0))
    (and (< (- n 1.0) 0.0) (= 0.0 n) (= Ret 1.0))
    (and (< (- n 1.0) 0.0) (> n 0.0) (= Ret 1.0)))
-----------------------------------------------------------------------------------------------

-------------------The final Z3 formula for constraint solving -------------------------
(declare-fun n () Real)
(declare-fun Ret () Real)
(let ((a!1 (or (and (< n 0.0) (= Ret 0.0))
               (and (< (- n 1.0) 0.0) (= 0.0 n) (= Ret 1.0))
               (and (< (- n 1.0) 0.0) (> n 0.0) (= Ret 1.0)))))
(let ((a!2 (= (or (and (> 2.0 n) (< 1.0 n) (< 0.0 n) (= Ret 2.0))
                  (and (> 2.0 n) (= n 1.0) (< 0.0 n) (= Ret 2.0))
                  (and (> 1.0 n) (< 0.0 n) (= Ret 1.0))
                  (and (> 1.0 n) (= n 0.0) (= Ret 1.0))
                  (and (> 0.0 n) (= Ret 0.0)))
              a!1)))
  (not a!2)))
-----------------------------------------------------------------------------------------------
