-------------------The Z3 formula for the old method (z3 smt format) -------------------------
(or (and (< n 10) (= Ret UF_result_1))
    (and (< n 100) (>= n 10) (= Ret (+ UF_result_1 1)))
    (and (< n 1000) (>= n 100) (>= n 10) (= Ret (+ UF_result_1 2))))
-----------------------------------------------------------------------------------------------

-------------------The Z3 formula for the new method ------------------------------------------
(let ((a!1 (<= (div (div (div n 10) 10) 10) 0))
      (a!3 (and (<= (div (div n 10) 10) 0)
                (> (div n 10) 0)
                (= Ret (+ UF_result_1 1)))))
(let ((a!2 (and a!1
                (> (div (div n 10) 10) 0)
                (> (div n 10) 0)
                (= Ret (+ (+ UF_result_1 1) 1)))))
  (or a!2 a!3 (and (<= (div n 10) 0) (= Ret UF_result_1)))))
-----------------------------------------------------------------------------------------------

-------------------The final Z3 formula for constraint solving -------------------------
(declare-fun n () Int)
(declare-fun Ret () Int)
(declare-fun UF_result_1 () Int)
(let ((a!1 (or (and (< n 10) (= Ret UF_result_1))
               (and (< n 100) (>= n 10) (= Ret (+ UF_result_1 1)))
               (and (< n 1000) (>= n 100) (>= n 10) (= Ret (+ UF_result_1 2)))))
      (a!2 (<= (div (div (div n 10) 10) 10) 0))
      (a!4 (and (<= (div (div n 10) 10) 0)
                (> (div n 10) 0)
                (= Ret (+ UF_result_1 1)))))
(let ((a!3 (and a!2
                (> (div (div n 10) 10) 0)
                (> (div n 10) 0)
                (= Ret (+ (+ UF_result_1 1) 1)))))
(let ((a!5 (or a!3 a!4 (and (<= (div n 10) 0) (= Ret UF_result_1)))))
  (not (= a!1 a!5)))))
-----------------------------------------------------------------------------------------------
