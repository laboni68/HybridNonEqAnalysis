

----------------------------------------------------Model (the counterexample in z3 smt2 format): ---------------------------------
(model 
  (define-fun Ret () Int
    3)
  (define-fun n () Int
    1)
  (define-fun UF_r_1 () Int
    2)
  (define-fun UF_r_2 ((x!0 Int)) Int
    0)
  (define-fun UF_r_3 ((x!0 Int) (x!1 Int)) Int
    3)
  (define-fun log ((x!0 Real)) Real
    0.0)
)

-----------------------------------------------------------------------------------------------
-------------------The Z3 formula for the old method (z3 smt format) -------------------------
(or (and (<= n 0) (= Ret (UF_r_2 n))) (and (> n 0) (= Ret (UF_r_3 UF_r_1 n))))
-----------------------------------------------------------------------------------------------

-------------------The Z3 formula for the new method ------------------------------------------
(or (and (<= n 1) (= Ret (UF_r_2 n))) (and (> n 1) (= Ret (UF_r_3 UF_r_1 n))))
-----------------------------------------------------------------------------------------------

-------------------The final Z3 formula for constraint solving -------------------------
(declare-fun n () Int)
(declare-fun Ret () Int)
(declare-fun UF_r_2 (Int ) Int)
(declare-fun UF_r_1 () Int)
(declare-fun UF_r_3 (Int Int ) Int)
(let ((a!1 (or (and (<= n 0) (= Ret (UF_r_2 n)))
               (and (> n 0) (= Ret (UF_r_3 UF_r_1 n)))))
      (a!2 (or (and (<= n 1) (= Ret (UF_r_2 n)))
               (and (> n 1) (= Ret (UF_r_3 UF_r_1 n))))))
  (not (= a!1 a!2)))
-----------------------------------------------------------------------------------------------
