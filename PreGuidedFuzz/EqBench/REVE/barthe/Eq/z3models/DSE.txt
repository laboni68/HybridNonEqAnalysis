

----------------------------------------------------Model (the counterexample in z3 smt2 format): ---------------------------------
(model 
  (define-fun UF_i_1 () Int
    (- 1))
  (define-fun UF_x_2 () Int
    6)
  (define-fun Ret () Int
    0)
  (define-fun c () Int
    (- 1))
  (define-fun n () Int
    0)
  (define-fun UF_i_3 ((x!0 Int)) Int
    (ite (= x!0 0) (- 1)
      0))
  (define-fun log ((x!0 Real)) Real
    0.0)
)

-----------------------------------------------------------------------------------------------
-------------------The Z3 formula for the old method (z3 smt format) -------------------------
(let ((a!1 (= Ret (+ c (* (UF_i_3 UF_i_1) 5) (+ c (* UF_i_1 5) UF_x_2))))
      (a!3 (and (>= (UF_i_3 UF_i_1) n)
                (< UF_i_1 n)
                (= Ret (+ c (* UF_i_1 5) UF_x_2)))))
(let ((a!2 (and (>= (UF_i_3 (UF_i_3 UF_i_1)) n)
                (< (UF_i_3 UF_i_1) n)
                (< UF_i_1 n)
                a!1)))
  (or a!2 a!3 (and (>= UF_i_1 n) (= Ret UF_x_2)))))
-----------------------------------------------------------------------------------------------

-------------------The Z3 formula for the new method ------------------------------------------
(let ((a!1 (and (>= (UF_i_3 (UF_i_3 UF_i_1)) n)
                (< (UF_i_3 UF_i_1) n)
                (< UF_i_1 n)
                (= Ret (+ c 5 (+ c UF_x_2))))))
  (or a!1
      (and (>= (UF_i_3 UF_i_1) n) (< UF_i_1 n) (= Ret (+ c UF_x_2)))
      (and (>= UF_i_1 n) (= Ret UF_x_2))))
-----------------------------------------------------------------------------------------------

-------------------The final Z3 formula for constraint solving -------------------------
(declare-fun UF_i_1 () Int)
(declare-fun UF_i_3 (Int ) Int)
(declare-fun n () Int)
(declare-fun Ret () Int)
(declare-fun c () Int)
(declare-fun UF_x_2 () Int)
(let ((a!1 (and (>= (UF_i_3 (UF_i_3 UF_i_1)) n)
                (< (UF_i_3 UF_i_1) n)
                (< UF_i_1 n)))
      (a!2 (= Ret (+ c (* (UF_i_3 UF_i_1) 5) (+ c (* UF_i_1 5) UF_x_2))))
      (a!3 (and (and (>= (UF_i_3 UF_i_1) n) (< UF_i_1 n))
                (= Ret (+ c (* UF_i_1 5) UF_x_2))))
      (a!5 (and (and (>= (UF_i_3 UF_i_1) n) (< UF_i_1 n)) (= Ret (+ c UF_x_2)))))
(let ((a!4 (and a!1 (= Ret (+ c 5 (+ c UF_x_2))))))
(let ((a!6 (= (or (and a!1 a!2) a!3 (and (>= UF_i_1 n) (= Ret UF_x_2)))
              (or a!4 a!5 (and (>= UF_i_1 n) (= Ret UF_x_2))))))
  (not a!6))))
-----------------------------------------------------------------------------------------------
