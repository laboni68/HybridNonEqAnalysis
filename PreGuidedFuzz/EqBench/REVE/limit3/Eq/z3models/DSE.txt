

----------------------------------------------------Model (the counterexample in z3 smt2 format): ---------------------------------
(model 
  (define-fun Ret () Int
    0)
  (define-fun n () Int
    2)
  (define-fun UF_r_3 ((x!0 Int)) Int
    (- 2))
  (define-fun UF_r_2 ((x!0 Int)) Int
    3)
  (define-fun log ((x!0 Real)) Real
    0.0)
)

-----------------------------------------------------------------------------------------------
-------------------The Z3 formula for the old method (z3 smt format) -------------------------
(let ((a!1 (and (> n 1) (= Ret (+ (UF_r_3 n) n)))))
  (or (and (<= n 1) (= Ret (UF_r_2 n))) a!1))
-----------------------------------------------------------------------------------------------

-------------------The Z3 formula for the new method ------------------------------------------
(let ((a!1 (and (>= (UF_r_3 n) 0) (> n 1) (= Ret (+ (UF_r_3 n) n)))))
  (or (and (<= n 1) (= Ret (UF_r_2 n)))
      a!1
      (and (< (UF_r_3 n) 0) (> n 1) (= Ret (UF_r_3 n)))))
-----------------------------------------------------------------------------------------------

-------------------The final Z3 formula for constraint solving -------------------------
(declare-fun n () Int)
(declare-fun Ret () Int)
(declare-fun UF_r_2 (Int ) Int)
(declare-fun UF_r_3 (Int ) Int)
(let ((a!1 (and (> n 1) (= Ret (+ (UF_r_3 n) n))))
      (a!3 (and (>= (UF_r_3 n) 0) (> n 1) (= Ret (+ (UF_r_3 n) n)))))
(let ((a!2 (or (and (<= n 1) (= Ret (UF_r_2 n))) a!1))
      (a!4 (or (and (<= n 1) (= Ret (UF_r_2 n)))
               a!3
               (and (< (UF_r_3 n) 0) (> n 1) (= Ret (UF_r_3 n))))))
  (not (= a!2 a!4))))
-----------------------------------------------------------------------------------------------
