

----------------------------------------------------Model (the counterexample in z3 smt2 format): ---------------------------------
(model 
  (define-fun Ret () Int
    0)
  (define-fun n () Int
    0)
  (define-fun log ((x!0 Real)) Real
    0.0)
)

-----------------------------------------------------------------------------------------------
-------------------The Z3 formula for the old method (z3 smt format) -------------------------
(or (and (>= 2 (+ n n)) (< 1 (+ n n)) (< 0 (+ n n)) (= Ret 2))
    (and (>= 0 (+ n n)) (= Ret 0)))
-----------------------------------------------------------------------------------------------

-------------------The Z3 formula for the new method ------------------------------------------
(let ((a!1 (<= (- (- (+ n 1) 1) 1) 0))
      (a!3 (and (<= (- (+ n 1) 1) 0) (> (+ n 1) 0) (= Ret 2))))
(let ((a!2 (and a!1 (> (- (+ n 1) 1) 0) (> (+ n 1) 0) (= Ret 4))))
  (or a!2 a!3 (and (<= (+ n 1) 0) (= Ret 0)))))
-----------------------------------------------------------------------------------------------

-------------------The final Z3 formula for constraint solving -------------------------
(declare-fun n () Int)
(declare-fun Ret () Int)
(let ((a!1 (or (and (>= 2 (+ n n)) (< 1 (+ n n)) (< 0 (+ n n)) (= Ret 2))
               (and (>= 0 (+ n n)) (= Ret 0))))
      (a!2 (<= (- (- (+ n 1) 1) 1) 0))
      (a!4 (and (<= (- (+ n 1) 1) 0) (> (+ n 1) 0) (= Ret 2))))
(let ((a!3 (and a!2 (> (- (+ n 1) 1) 0) (> (+ n 1) 0) (= Ret 4))))
(let ((a!5 (or a!3 a!4 (and (<= (+ n 1) 0) (= Ret 0)))))
  (not (= a!1 a!5)))))
-----------------------------------------------------------------------------------------------
