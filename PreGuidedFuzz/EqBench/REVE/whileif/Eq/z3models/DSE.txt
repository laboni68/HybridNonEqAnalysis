

----------------------------------------------------Model (the counterexample in z3 smt2 format): ---------------------------------
(model 
  (define-fun t () Int
    0)
  (define-fun c () Int
    3)
  (define-fun Ret () Int
    0)
  (define-fun log ((x!0 Real)) Real
    0.0)
)

-----------------------------------------------------------------------------------------------
-------------------The Z3 formula for the old method (z3 smt format) -------------------------
(let ((a!1 (and (>= 0 (- (- c 1) 1)) (< 0 (- c 1)) (< 0 c) (< 0 t) (= Ret 2))))
  (or a!1
      (and (>= 0 (- c 1)) (< 0 c) (< 0 t) (= Ret 1))
      (and (>= 0 c) (< 0 t) (= Ret 0))
      (and (>= 0 t) (= Ret 0))))
-----------------------------------------------------------------------------------------------

-------------------The Z3 formula for the new method ------------------------------------------
(or (and (>= 0 (- c 1)) (< 0 t) (< 0 c) (= Ret 1)) (and (>= 0 c) (= Ret 0)))
-----------------------------------------------------------------------------------------------

-------------------The final Z3 formula for constraint solving -------------------------
(declare-fun c () Int)
(declare-fun t () Int)
(declare-fun Ret () Int)
(let ((a!1 (and (>= 0 (- (- c 1) 1)) (< 0 (- c 1)) (< 0 c) (< 0 t) (= Ret 2)))
      (a!3 (or (and (>= 0 (- c 1)) (< 0 t) (< 0 c) (= Ret 1))
               (and (>= 0 c) (= Ret 0)))))
(let ((a!2 (or a!1
               (and (>= 0 (- c 1)) (< 0 c) (< 0 t) (= Ret 1))
               (and (>= 0 c) (< 0 t) (= Ret 0))
               (and (>= 0 t) (= Ret 0)))))
  (not (= a!2 a!3))))
-----------------------------------------------------------------------------------------------
