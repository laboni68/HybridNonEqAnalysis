getInputValues: 2
Fuzzing time limit exceeded
Fuzzing time limit exceeded : 224
symbolic.min_int=-100
symbolic.min_long=-100
symbolic.min_short=-32768
symbolic.min_byte=-128
symbolic.min_char=0
symbolic.max_int=100
symbolic.max_long=100
symbolic.max_short=32767
symbolic.max_byte=127
symbolic.max_char=65535
symbolic.min_double=-100.0
symbolic.max_double=100.0
JavaPathfinder core system v8.0 (rev ecdb30ddaab26d2773e7741b09fd902efb7999c7) - (C) 2005-2014 United States Government. All rights reserved.


====================================================== system under test
demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.main()

====================================================== search started: 8/12/24 9:58 AM
e == e1
Error equivalence spec
Differencing Driver Output:
  Errors:
  - Old: null
  - New: null
  - Error Equivalent: true
Output equivalence spec
partitionNeqResult: UNSATISFIABLE
partitionEqResult: SATISFIABLE
  Results:
Symbolic Exp 1[ CONST_  - Equivalent: true .concat(.valueof[((x_1_SYMREAL / CONST_2.0))]).concat(CONST_ ).concat(.valueof[((x_1_SYMREAL / CONST_2.0))])]
Call from executeInstruction
Partition is eq...
Partition classification: done 
Start next partition function in DifferencingListener
*************Summary***************
PC is:constraint # = 5
77: (x_1_SYMREAL[-2.0] / CONST_2.0) = (x_1_SYMREAL[-2.0] / CONST_2.0) &&
15: (CONST_0.0 - (x_1_SYMREAL[-2.0] - ((x_1_SYMREAL[-2.0] / CONST_2.0) * (x_1_SYMREAL[-2.0] / CONST_2.0)))) < epsilon_2_SYMREAL[23.416955743821344] &&
44: (x_1_SYMREAL[-2.0] - ((x_1_SYMREAL[-2.0] / CONST_2.0) * (x_1_SYMREAL[-2.0] / CONST_2.0))) < CONST_0.0 &&
15: (CONST_0.0 - (x_1_SYMREAL[-2.0] - (x_1_SYMREAL[-2.0] / CONST_2.0))) < epsilon_2_SYMREAL[23.416955743821344] &&
44: (x_1_SYMREAL[-2.0] - (x_1_SYMREAL[-2.0] / CONST_2.0)) < CONST_0.0
133: Ret_0_SYMREAL = (x_1_SYMREAL[-2.0] / CONST_2.0)
***********************************
e == e1
Error equivalence spec
Differencing Driver Output:
  Errors:
  - Old: null
  - New: null
  - Error Equivalent: true
Output equivalence spec
partitionNeqResult: UNSATISFIABLE
partitionEqResult: SATISFIABLE
  Results:
Symbolic Exp 1[ CONST_  - Equivalent: true .concat(.valueof[((x_1_SYMREAL / CONST_2.0))]).concat(CONST_ ).concat(.valueof[((x_1_SYMREAL / CONST_2.0))])]
Call from executeInstruction
Partition is eq...
Partition classification: done 
Start next partition function in DifferencingListener
*************Summary***************
PC is:constraint # = 5
77: (x_1_SYMREAL[-2.0] / CONST_2.0) = (x_1_SYMREAL[-2.0] / CONST_2.0) &&
15: epsilon_2_SYMREAL[3.0] = (CONST_0.0 - (x_1_SYMREAL[-2.0] - ((x_1_SYMREAL[-2.0] / CONST_2.0) * (x_1_SYMREAL[-2.0] / CONST_2.0)))) &&
44: (x_1_SYMREAL[-2.0] - ((x_1_SYMREAL[-2.0] / CONST_2.0) * (x_1_SYMREAL[-2.0] / CONST_2.0))) < CONST_0.0 &&
15: (CONST_0.0 - (x_1_SYMREAL[-2.0] - (x_1_SYMREAL[-2.0] / CONST_2.0))) < epsilon_2_SYMREAL[3.0] &&
44: (x_1_SYMREAL[-2.0] - (x_1_SYMREAL[-2.0] / CONST_2.0)) < CONST_0.0
133: Ret_0_SYMREAL = (x_1_SYMREAL[-2.0] / CONST_2.0)
***********************************
e == e1
Error equivalence spec
Differencing Driver Output:
  Errors:
  - Old: null
  - New: null
  - Error Equivalent: true
Output equivalence spec
partitionNeqResult: SATISFIABLE
partitionEqResult: UNSATISFIABLE
  Results:
Symbolic Exp 1[ CONST_  - Equivalent: false .concat(.valueof[((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))]).concat(CONST_ ).concat(.valueof[((x_1_SYMREAL / CONST_2.0))])]
Property violated in execution listener
propertyViolated in path condition listener
Call from propertyViolated
Program Args: [-21.0885912659, 52.3471332768]
hasUif: false
Output is: Error: Could not find or load main class demo.QuixBugs.NEq.SQRT.instrumented.IDiffPASDA1fuzz

Start next partition function in DifferencingListener

====================================================== error 1
gov.nasa.jpf.vm.NoUncaughtExceptionsProperty
demo.QuixFix.NEq.SQRT.instrumented.DifferentOutputsException: 
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.run(IDiffPASDA1.java:130)
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.main(IDiffPASDA1.java:137)


====================================================== snapshot #1
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.run(IDiffPASDA1.java:130)
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.main(IDiffPASDA1.java:137)

e == e1
Error equivalence spec
Differencing Driver Output:
  Errors:
  - Old: null
  - New: null
  - Error Equivalent: true
Output equivalence spec
partitionNeqResult: SATISFIABLE
partitionEqResult: UNSATISFIABLE
  Results:
Symbolic Exp 1[ CONST_  - Equivalent: false .concat(.valueof[((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))]).concat(CONST_ ).concat(.valueof[((x_1_SYMREAL / CONST_2.0))])]
Property violated in execution listener
propertyViolated in path condition listener
Call from propertyViolated
Program Args: [-77.7117774144, 417.30091051377815]
hasUif: false
Output is: Error: Could not find or load main class demo.QuixBugs.NEq.SQRT.instrumented.IDiffPASDA1fuzz

Start next partition function in DifferencingListener

====================================================== error 2
gov.nasa.jpf.vm.NoUncaughtExceptionsProperty
demo.QuixFix.NEq.SQRT.instrumented.DifferentOutputsException: 
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.run(IDiffPASDA1.java:130)
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.main(IDiffPASDA1.java:137)


====================================================== snapshot #2
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.run(IDiffPASDA1.java:130)
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.main(IDiffPASDA1.java:137)

e == e1
Error equivalence spec
Differencing Driver Output:
  Errors:
  - Old: null
  - New: null
  - Error Equivalent: true
Output equivalence spec
partitionNeqResult: SATISFIABLE
partitionEqResult: UNSATISFIABLE
  Results:
Symbolic Exp 1[ CONST_  - Equivalent: false .concat(.valueof[((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))]).concat(CONST_ ).concat(.valueof[((x_1_SYMREAL / CONST_2.0))])]
Property violated in execution listener
propertyViolated in path condition listener
Call from propertyViolated
Program Args: [-43.9692117561, 89.3921185889]
hasUif: false
Output is: Error: Could not find or load main class demo.QuixBugs.NEq.SQRT.instrumented.IDiffPASDA1fuzz

Start next partition function in DifferencingListener

====================================================== error 3
gov.nasa.jpf.vm.NoUncaughtExceptionsProperty
demo.QuixFix.NEq.SQRT.instrumented.DifferentOutputsException: 
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.run(IDiffPASDA1.java:130)
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.main(IDiffPASDA1.java:137)


====================================================== snapshot #3
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.run(IDiffPASDA1.java:130)
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.main(IDiffPASDA1.java:137)

e == e1
Error equivalence spec
Differencing Driver Output:
  Errors:
  - Old: null
  - New: null
  - Error Equivalent: true
Output equivalence spec
partitionNeqResult: SATISFIABLE
partitionEqResult: UNSATISFIABLE
  Results:
Symbolic Exp 1[ CONST_  - Equivalent: false .concat(.valueof[((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))]).concat(CONST_ ).concat(.valueof[((x_1_SYMREAL / CONST_2.0))])]
Property violated in execution listener
propertyViolated in path condition listener
Call from propertyViolated
Program Args: [-77.7117774144, 128.19907422116148]
hasUif: false
Output is: Error: Could not find or load main class demo.QuixBugs.NEq.SQRT.instrumented.IDiffPASDA1fuzz

Start next partition function in DifferencingListener

====================================================== error 4
gov.nasa.jpf.vm.NoUncaughtExceptionsProperty
demo.QuixFix.NEq.SQRT.instrumented.DifferentOutputsException: 
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.run(IDiffPASDA1.java:130)
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.main(IDiffPASDA1.java:137)


====================================================== snapshot #4
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.run(IDiffPASDA1.java:130)
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.main(IDiffPASDA1.java:137)

e == e1
Error equivalence spec
Differencing Driver Output:
  Errors:
  - Old: null
  - New: null
  - Error Equivalent: true
Output equivalence spec
partitionNeqResult: SATISFIABLE
partitionEqResult: UNSATISFIABLE
  Results:
Symbolic Exp 1[ CONST_  - Equivalent: false .concat(.valueof[((((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))]).concat(CONST_ ).concat(.valueof[((x_1_SYMREAL / CONST_2.0))])]
Property violated in execution listener
propertyViolated in path condition listener
Call from propertyViolated
Program Args: [-77.7117774144, 86.0118599847]
hasUif: false
Output is: Error: Could not find or load main class demo.QuixBugs.NEq.SQRT.instrumented.IDiffPASDA1fuzz

Start next partition function in DifferencingListener

====================================================== error 5
gov.nasa.jpf.vm.NoUncaughtExceptionsProperty
demo.QuixFix.NEq.SQRT.instrumented.DifferentOutputsException: 
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.run(IDiffPASDA1.java:130)
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.main(IDiffPASDA1.java:137)


====================================================== snapshot #5
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.run(IDiffPASDA1.java:130)
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.main(IDiffPASDA1.java:137)

e == e1
Error equivalence spec
Differencing Driver Output:
  Errors:
  - Old: null
  - New: null
  - Error Equivalent: true
Output equivalence spec
partitionNeqResult: SATISFIABLE
partitionEqResult: UNSATISFIABLE
  Results:
Symbolic Exp 1[ CONST_  - Equivalent: false .concat(.valueof[((((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))]).concat(CONST_ ).concat(.valueof[((x_1_SYMREAL / CONST_2.0))])]
Property violated in execution listener
propertyViolated in path condition listener
Call from propertyViolated
Program Args: [-77.7117774144, 81.38187064197217]
hasUif: false
Output is: Error: Could not find or load main class demo.QuixBugs.NEq.SQRT.instrumented.IDiffPASDA1fuzz

Start next partition function in DifferencingListener

====================================================== error 6
gov.nasa.jpf.vm.NoUncaughtExceptionsProperty
demo.QuixFix.NEq.SQRT.instrumented.DifferentOutputsException: 
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.run(IDiffPASDA1.java:130)
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.main(IDiffPASDA1.java:137)


====================================================== snapshot #6
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.run(IDiffPASDA1.java:130)
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.main(IDiffPASDA1.java:137)

e == e1
Error equivalence spec
Differencing Driver Output:
  Errors:
  - Old: null
  - New: null
  - Error Equivalent: true
Output equivalence spec
partitionNeqResult: UNKNOWN
partitionEqResult: UNSATISFIABLE
  Results:
Symbolic Exp 1[ CONST_  - Equivalent: false .concat(.valueof[((((((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))]).concat(CONST_ ).concat(.valueof[((x_1_SYMREAL / CONST_2.0))])]
Property violated in execution listener
propertyViolated in path condition listener
Call from propertyViolated
Program Args: [-52.631437339442414, 63.03179563395264]
hasUif: false
Output is: Error: Could not find or load main class demo.QuixBugs.NEq.SQRT.instrumented.IDiffPASDA1fuzz

Start next partition function in DifferencingListener

====================================================== error 7
gov.nasa.jpf.vm.NoUncaughtExceptionsProperty
demo.QuixFix.NEq.SQRT.instrumented.DifferentOutputsException: 
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.run(IDiffPASDA1.java:130)
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.main(IDiffPASDA1.java:137)


====================================================== snapshot #7
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.run(IDiffPASDA1.java:130)
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.main(IDiffPASDA1.java:137)

e == e1
Error equivalence spec
Differencing Driver Output:
  Errors:
  - Old: null
  - New: null
  - Error Equivalent: true
Output equivalence spec
partitionNeqResult: UNKNOWN
partitionEqResult: UNSATISFIABLE
  Results:
Symbolic Exp 1[ CONST_  - Equivalent: false .concat(.valueof[((((((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))]).concat(CONST_ ).concat(.valueof[((x_1_SYMREAL / CONST_2.0))])]
Property violated in execution listener
propertyViolated in path condition listener
Call from propertyViolated
Program Args: [-43.9692117561, 43.997494416617585]
hasUif: false
Output is: Error: Could not find or load main class demo.QuixBugs.NEq.SQRT.instrumented.IDiffPASDA1fuzz

Start next partition function in DifferencingListener

====================================================== error 8
gov.nasa.jpf.vm.NoUncaughtExceptionsProperty
demo.QuixFix.NEq.SQRT.instrumented.DifferentOutputsException: 
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.run(IDiffPASDA1.java:130)
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.main(IDiffPASDA1.java:137)


====================================================== snapshot #8
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.run(IDiffPASDA1.java:130)
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.main(IDiffPASDA1.java:137)

e == e1
Error equivalence spec
Differencing Driver Output:
  Errors:
  - Old: null
  - New: null
  - Error Equivalent: true
Output equivalence spec
partitionNeqResult: UNKNOWN
partitionEqResult: UNSATISFIABLE
  Results:
Symbolic Exp 1[ CONST_  - Equivalent: false .concat(.valueof[((((((((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))]).concat(CONST_ ).concat(.valueof[((x_1_SYMREAL / CONST_2.0))])]
Property violated in execution listener
propertyViolated in path condition listener
Call from propertyViolated
Program Args: [-62.74962884098578, 72.01920605330409]
hasUif: false
Output is: Error: Could not find or load main class demo.QuixBugs.NEq.SQRT.instrumented.IDiffPASDA1fuzz

Start next partition function in DifferencingListener

====================================================== error 9
gov.nasa.jpf.vm.NoUncaughtExceptionsProperty
demo.QuixFix.NEq.SQRT.instrumented.DifferentOutputsException: 
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.run(IDiffPASDA1.java:130)
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.main(IDiffPASDA1.java:137)


====================================================== snapshot #9
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.run(IDiffPASDA1.java:130)
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.main(IDiffPASDA1.java:137)

e == e1
Error equivalence spec
Differencing Driver Output:
  Errors:
  - Old: null
  - New: null
  - Error Equivalent: true
Output equivalence spec
partitionNeqResult: UNKNOWN
partitionEqResult: UNSATISFIABLE
  Results:
Symbolic Exp 1[ CONST_  - Equivalent: false .concat(.valueof[((((((((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))]).concat(CONST_ ).concat(.valueof[((x_1_SYMREAL / CONST_2.0))])]
Property violated in execution listener
propertyViolated in path condition listener
Call from propertyViolated
Program Args: [-65.9647843631, 67.05306117565802]
hasUif: false
Output is: Error: Could not find or load main class demo.QuixBugs.NEq.SQRT.instrumented.IDiffPASDA1fuzz

Start next partition function in DifferencingListener

====================================================== error 10
gov.nasa.jpf.vm.NoUncaughtExceptionsProperty
demo.QuixFix.NEq.SQRT.instrumented.DifferentOutputsException: 
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.run(IDiffPASDA1.java:130)
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.main(IDiffPASDA1.java:137)


====================================================== snapshot #10
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.run(IDiffPASDA1.java:130)
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.main(IDiffPASDA1.java:137)

e == e1
Error equivalence spec
Differencing Driver Output:
  Errors:
  - Old: null
  - New: null
  - Error Equivalent: true
Output equivalence spec
partitionNeqResult: SATISFIABLE
partitionEqResult: UNSATISFIABLE
  Results:
Symbolic Exp 1[ CONST_  - Equivalent: false .concat(.valueof[((((((((((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))]).concat(CONST_ ).concat(.valueof[((x_1_SYMREAL / CONST_2.0))])]
Property violated in execution listener
propertyViolated in path condition listener
Call from propertyViolated
Program Args: [-54.4310405260263, 65.34185715138554]
hasUif: false
Output is: Error: Could not find or load main class demo.QuixBugs.NEq.SQRT.instrumented.IDiffPASDA1fuzz

Start next partition function in DifferencingListener

====================================================== error 11
gov.nasa.jpf.vm.NoUncaughtExceptionsProperty
demo.QuixFix.NEq.SQRT.instrumented.DifferentOutputsException: 
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.run(IDiffPASDA1.java:130)
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.main(IDiffPASDA1.java:137)


====================================================== snapshot #11
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.run(IDiffPASDA1.java:130)
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.main(IDiffPASDA1.java:137)

e == e1
Error equivalence spec
Differencing Driver Output:
  Errors:
  - Old: null
  - New: null
  - Error Equivalent: true
Output equivalence spec
partitionNeqResult: SATISFIABLE
partitionEqResult: UNSATISFIABLE
  Results:
Symbolic Exp 1[ CONST_  - Equivalent: false .concat(.valueof[((((((((((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))]).concat(CONST_ ).concat(.valueof[((x_1_SYMREAL / CONST_2.0))])]
Property violated in execution listener
propertyViolated in path condition listener
Call from propertyViolated
Program Args: [-77.7117774144, 79.28033461348835]
hasUif: false
Output is: Error: Could not find or load main class demo.QuixBugs.NEq.SQRT.instrumented.IDiffPASDA1fuzz

Start next partition function in DifferencingListener

====================================================== error 12
gov.nasa.jpf.vm.NoUncaughtExceptionsProperty
demo.QuixFix.NEq.SQRT.instrumented.DifferentOutputsException: 
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.run(IDiffPASDA1.java:130)
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.main(IDiffPASDA1.java:137)


====================================================== snapshot #12
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.run(IDiffPASDA1.java:130)
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.main(IDiffPASDA1.java:137)

e == e1
Error equivalence spec
Differencing Driver Output:
  Errors:
  - Old: null
  - New: null
  - Error Equivalent: true
Output equivalence spec
partitionNeqResult: UNKNOWN
partitionEqResult: UNSATISFIABLE
  Results:
Symbolic Exp 1[ CONST_  - Equivalent: false .concat(.valueof[((((((((((((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))]).concat(CONST_ ).concat(.valueof[((x_1_SYMREAL / CONST_2.0))])]
Property violated in execution listener
propertyViolated in path condition listener
Call from propertyViolated
Program Args: [-0.5531337623819043, 0.5625399874298046]
hasUif: false
Output is: Error: Could not find or load main class demo.QuixBugs.NEq.SQRT.instrumented.IDiffPASDA1fuzz

Start next partition function in DifferencingListener

====================================================== error 13
gov.nasa.jpf.vm.NoUncaughtExceptionsProperty
demo.QuixFix.NEq.SQRT.instrumented.DifferentOutputsException: 
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.run(IDiffPASDA1.java:130)
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.main(IDiffPASDA1.java:137)


====================================================== snapshot #13
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.run(IDiffPASDA1.java:130)
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.main(IDiffPASDA1.java:137)

Call from searchConstraintHit
Start next partition function in DifferencingListener
Partition classification is null

====================================================== search constraint
depth limit reached: 10

====================================================== snapshot #13
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.run(IDiffPASDA1.java:130)
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.main(IDiffPASDA1.java:137)


====================================================== search constraint
depth limit reached: 10

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.areResultsEquivalent(IDiffPASDA1.java:77)
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.run(IDiffPASDA1.java:122)
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.main(IDiffPASDA1.java:137)


====================================================== search constraint
depth limit reached: 10

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.areResultsEquivalent(IDiffPASDA1.java:77)
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.run(IDiffPASDA1.java:122)
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.main(IDiffPASDA1.java:137)

e == e1
Error equivalence spec
Differencing Driver Output:
  Errors:
  - Old: null
  - New: null
  - Error Equivalent: true
Output equivalence spec
partitionNeqResult: UNKNOWN
partitionEqResult: UNSATISFIABLE
  Results:
Symbolic Exp 1[ CONST_  - Equivalent: false .concat(.valueof[((((((((((((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))]).concat(CONST_ ).concat(.valueof[((x_1_SYMREAL / CONST_2.0))])]
Property violated in execution listener
propertyViolated in path condition listener
Call from propertyViolated
Program Args: [-57.1852750025, 57.86467160031141]
hasUif: false
Output is: Error: Could not find or load main class demo.QuixBugs.NEq.SQRT.instrumented.IDiffPASDA1fuzz

Start next partition function in DifferencingListener

====================================================== error 14
gov.nasa.jpf.vm.NoUncaughtExceptionsProperty
demo.QuixFix.NEq.SQRT.instrumented.DifferentOutputsException: 
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.run(IDiffPASDA1.java:130)
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.main(IDiffPASDA1.java:137)


====================================================== snapshot #14
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.run(IDiffPASDA1.java:130)
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.main(IDiffPASDA1.java:137)

e == e1
Error equivalence spec
Differencing Driver Output:
  Errors:
  - Old: null
  - New: null
  - Error Equivalent: true
Call from searchConstraintHit
Start next partition function in DifferencingListener
Partition classification is null

====================================================== search constraint
depth limit reached: 10

====================================================== snapshot 
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.areResultsEquivalent(IDiffPASDA1.java:77)
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.run(IDiffPASDA1.java:122)
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.main(IDiffPASDA1.java:137)

e == e1
Error equivalence spec
Differencing Driver Output:
  Errors:
  - Old: null
  - New: null
  - Error Equivalent: true
Output equivalence spec
partitionNeqResult: UNKNOWN
partitionEqResult: UNSATISFIABLE
  Results:
Symbolic Exp 1[ CONST_  - Equivalent: false .concat(.valueof[((((((((((((((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((((((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5) + (x_1_SYMREAL / (((((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5) + (x_1_SYMREAL / (((x_1_SYMREAL / CONST_2.0) + (x_1_SYMREAL / (x_1_SYMREAL / CONST_2.0))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))) * CONST_0.5))]).concat(CONST_ ).concat(.valueof[((x_1_SYMREAL / CONST_2.0))])]
Property violated in execution listener
propertyViolated in path condition listener
Call from propertyViolated
Program Args: [-50.2344108881, 54.32320395617852]
hasUif: false
Output is: Error: Could not find or load main class demo.QuixBugs.NEq.SQRT.instrumented.IDiffPASDA1fuzz

Start next partition function in DifferencingListener

====================================================== error 15
gov.nasa.jpf.vm.NoUncaughtExceptionsProperty
demo.QuixFix.NEq.SQRT.instrumented.DifferentOutputsException: 
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.run(IDiffPASDA1.java:130)
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.main(IDiffPASDA1.java:137)


====================================================== snapshot #15
thread java.lang.Thread:{id:0,name:main,status:RUNNING,priority:5,isDaemon:false,lockCount:0,suspendCount:0}
  call stack:
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.run(IDiffPASDA1.java:130)
	at demo.QuixFix.NEq.SQRT.instrumented.IDiffPASDA1.main(IDiffPASDA1.java:137)

TIMEOUT: ../QuixBugs/NEq/SQRT/instrumented -> MAYBE_EQ
